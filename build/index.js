function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}import React,{Component}from"react";import{View,Text,TextInput,StyleSheet,I18nManager}from"react-native";import*as Animatable from"react-native-animatable";const styles=StyleSheet.create({containerDefault:{},cellDefault:{borderColor:"gray",borderWidth:1},cellFocusedDefault:{borderColor:"black",borderWidth:2},textStyleDefault:{color:"gray",fontSize:24},textStyleFocusedDefault:{color:"black"}});class SmoothPinCodeInput extends Component{constructor(...a){super(...a),_defineProperty(this,"state",{maskDelay:!1,focused:!1}),_defineProperty(this,"ref",React.createRef()),_defineProperty(this,"inputRef",React.createRef()),_defineProperty(this,"animate",({animation:a="shake",duration:b=650})=>this.props.animated?this.ref.current[a](b):new Promise((a,b)=>b(new Error("Animations are disabled")))),_defineProperty(this,"shake",()=>this.animate({animation:"shake"})),_defineProperty(this,"focus",()=>this.inputRef.current.focus()),_defineProperty(this,"blur",()=>this.inputRef.current.blur()),_defineProperty(this,"clear",()=>this.inputRef.current.clear()),_defineProperty(this,"_inputCode",a=>{const{password:b,codeLength:e=4,onTextChange:c,onFulfill:d}=this.props;this.props.restrictToNumbers&&(a=(a.match(/[0-9]/g)||[]).join("")),c&&c(a),a.length===e&&d&&d(a);// handle password mask
const f=b&&a.length>this.props.value.length;// only when input new char
this.setState({maskDelay:f}),f&&(clearTimeout(this.maskTimeout),this.maskTimeout=setTimeout(()=>{this.setState({maskDelay:!1})},this.props.maskDelay))}),_defineProperty(this,"_keyPress",a=>{if("Backspace"===a.nativeEvent.key){const{value:a,onBackspace:b}=this.props;""===a&&b&&b()}}),_defineProperty(this,"_onFocused",()=>{this.setState({focused:!0}),"function"==typeof this.props.onFocus&&this.props.onFocus()}),_defineProperty(this,"_onBlurred",()=>{this.setState({focused:!1}),"function"==typeof this.props.onBlur&&this.props.onBlur()})}componentWillUnmount(){clearTimeout(this.maskTimeout)}render(){const{value:a,codeLength:b,cellSize:c,cellSpacing:d,placeholder:e,password:f,mask:g,autoFocus:h,containerStyle:i,cellStyle:j,cellStyleFocused:k,cellStyleFilled:l,textStyle:m,textStyleFocused:n,keyboardType:o,animationFocused:p,animated:q,testID:r,editable:s,inputProps:t,disableFullscreenUI:u}=this.props,{maskDelay:v,focused:w}=this.state;return/*#__PURE__*/React.createElement(Animatable.View,{ref:this.ref,style:[{alignItems:"stretch",flexDirection:"row",justifyContent:"center",position:"relative",width:c*b+d*(b-1),height:c},i]},/*#__PURE__*/React.createElement(View,{style:{position:"absolute",margin:0,height:"100%",flexDirection:I18nManager.isRTL?"row-reverse":"row",alignItems:"center"}},Array.apply(null,Array(b)).map((b,h)=>{const i=w&&h===a.length,o=h<a.length,r=h===a.length-1,s=o&&f&&(!v||!r),t="string"==typeof e,u="string"==typeof g,x=a.charAt(h);let y=null;(o||null!==e)&&(s&&u?y=g:!o&&t?y=e:x&&(y=x));const z=t?null:e,A=s&&!u?g:null,B="string"==typeof y;return/*#__PURE__*/React.createElement(Animatable.View,{key:h,style:[{width:c,height:c,marginLeft:d/2,marginRight:d/2,flexDirection:"row",alignItems:"center",justifyContent:"center"},j,i?k:{},o?l:{}],animation:h===a.length&&w&&q?p:null,iterationCount:"infinite",duration:500},B&&!A&&/*#__PURE__*/React.createElement(Text,{style:[m,i?n:{}]},y),!B&&!A&&z,B&&A)})),/*#__PURE__*/React.createElement(TextInput,_extends({disableFullscreenUI:u,value:a,ref:this.inputRef,onChangeText:this._inputCode,onKeyPress:this._keyPress,onFocus:()=>this._onFocused(),onBlur:()=>this._onBlurred(),spellCheck:!1,autoFocus:h,keyboardType:o,numberOfLines:1,caretHidden:!0,maxLength:b,selection:{start:a.length,end:a.length},style:{flex:1,opacity:0,textAlign:"center"},testID:r||void 0,editable:s},t)))}}_defineProperty(SmoothPinCodeInput,"defaultProps",{value:"",codeLength:4,cellSize:48,cellSpacing:4,placeholder:"",password:!1,mask:"*",maskDelay:200,keyboardType:"numeric",autoFocus:!1,restrictToNumbers:!1,containerStyle:styles.containerDefault,cellStyle:styles.cellDefault,cellStyleFocused:styles.cellFocusedDefault,textStyle:styles.textStyleDefault,textStyleFocused:styles.textStyleFocusedDefault,animationFocused:"pulse",animated:!0,editable:!0,inputProps:{},disableFullscreenUI:!0});export default SmoothPinCodeInput;